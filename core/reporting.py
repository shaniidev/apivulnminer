"""
Report Generation Module
Generates beautiful reports in multiple formats
"""

import json
import csv
import html
from datetime import datetime
from typing import List, Dict, Any
from pathlib import Path
from dataclasses import asdict

from utils.logger import get_logger

logger = get_logger(__name__)

class ReportGenerator:
    """Generates scan reports in multiple formats."""
    
    def __init__(self):
        self.report_templates = self._load_templates()
    
    def _load_templates(self) -> Dict[str, str]:
        """Load report templates."""
        return {
            'html_template': '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>APIVulnMiner Scan Report</title>
    <style>
        body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px 10px 0 0; }}
        .header h1 {{ margin: 0; font-size: 2.5em; }}
        .header p {{ margin: 10px 0 0 0; opacity: 0.9; }}
        .content {{ padding: 30px; }}
        .summary {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }}
        .stat-card {{ background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; border-left: 4px solid #667eea; }}
        .stat-number {{ font-size: 2em; font-weight: bold; color: #333; }}
        .stat-label {{ color: #666; margin-top: 5px; }}
        .vulnerability {{ margin: 20px 0; padding: 20px; border-radius: 8px; border-left: 4px solid #dc3545; }}
        .vuln-critical {{ border-left-color: #dc3545; background: #fff5f5; }}
        .vuln-high {{ border-left-color: #fd7e14; background: #fff8f0; }}
        .vuln-medium {{ border-left-color: #ffc107; background: #fffbf0; }}
        .vuln-low {{ border-left-color: #28a745; background: #f0fff4; }}
        .vuln-header {{ display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; }}
        .vuln-title {{ font-weight: bold; font-size: 1.1em; }}
        .severity-badge {{ padding: 4px 12px; border-radius: 20px; color: white; font-size: 0.8em; font-weight: bold; }}
        .severity-critical {{ background: #dc3545; }}
        .severity-high {{ background: #fd7e14; }}
        .severity-medium {{ background: #ffc107; color: #333; }}
        .severity-low {{ background: #28a745; }}
        .endpoint-list {{ background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 10px 0; }}
        .endpoint {{ font-family: monospace; background: white; padding: 8px; margin: 5px 0; border-radius: 4px; }}
        .method {{ font-weight: bold; margin-right: 10px; }}
        .method-get {{ color: #28a745; }}
        .method-post {{ color: #007bff; }}
        .method-put {{ color: #ffc107; }}
        .method-delete {{ color: #dc3545; }}
        .footer {{ text-align: center; padding: 20px; color: #666; border-top: 1px solid #eee; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸŽ¯ APIVulnMiner Report</h1>
            <p>Comprehensive API Security Assessment</p>
            <p>Target: {target_url} | Generated: {timestamp}</p>
        </div>
        <div class="content">
            <div class="summary">
                <div class="stat-card">
                    <div class="stat-number">{total_endpoints}</div>
                    <div class="stat-label">Endpoints Tested</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{endpoints_found}</div>
                    <div class="stat-label">Endpoints Found</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{total_vulnerabilities}</div>
                    <div class="stat-label">Vulnerabilities</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{high_severity}</div>
                    <div class="stat-label">High/Critical</div>
                </div>
            </div>
            
            <h2>ðŸš¨ Vulnerabilities Found</h2>
            {vulnerabilities_html}
            
            <h2>ðŸ“‹ Discovered Endpoints</h2>
            <div class="endpoint-list">
                {endpoints_html}
            </div>
        </div>
        <div class="footer">
            <p>Generated by APIVulnMiner - Advanced API Security Scanner</p>
        </div>
    </div>
</body>
</html>
            '''
        }
    
    async def generate_report(
        self, 
        results: List, 
        format_type: str, 
        output_file: str, 
        config
    ):
        """Generate report in specified format."""
        try:
            if format_type == 'json':
                await self._generate_json_report(results, output_file, config)
            elif format_type == 'html':
                await self._generate_html_report(results, output_file, config)
            elif format_type == 'csv':
                await self._generate_csv_report(results, output_file, config)
            elif format_type == 'txt':
                await self._generate_txt_report(results, output_file, config)
            else:
                raise ValueError(f"Unsupported format: {format_type}")
                
            logger.info(f"Report generated successfully: {output_file}")
            
        except Exception as e:
            logger.error(f"Failed to generate report: {str(e)}")
            raise
    
    async def _generate_json_report(self, results: List, output_file: str, config):
        """Generate JSON report."""
        # Calculate summary statistics
        total_endpoints = len(results)
        endpoints_found = len([r for r in results if r.status_code < 400])
        total_vulns = sum(len(r.vulnerabilities) for r in results)
        
        high_severity = len([r for r in results if r.severity in ["critical", "high"]])
        medium_severity = len([r for r in results if r.severity == "medium"])
        low_severity = len([r for r in results if r.severity == "low"])
        
        # Prepare report data
        report_data = {
            'scan_info': {
                'target_url': config.target_url,
                'timestamp': datetime.now().isoformat(),
                'scanner_version': '1.0.0',
                'scan_duration': 'N/A'  # Could be calculated
            },
            'summary': {
                'total_endpoints_tested': total_endpoints,
                'endpoints_found': endpoints_found,
                'total_vulnerabilities': total_vulns,
                'high_severity_count': high_severity,
                'medium_severity_count': medium_severity,
                'low_severity_count': low_severity
            },
            'results': [asdict(result) for result in results],
            'vulnerabilities': []
        }
        
        # Extract all vulnerabilities
        for result in results:
            for vuln in result.vulnerabilities:
                vuln_data = vuln.copy()
                vuln_data['endpoint'] = result.endpoint
                vuln_data['method'] = result.method
                vuln_data['status_code'] = result.status_code
                report_data['vulnerabilities'].append(vuln_data)
        
        # Write JSON report
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
    
    async def _generate_html_report(self, results: List, output_file: str, config):
        """Generate HTML report."""
        # Calculate statistics
        total_endpoints = len(results)
        endpoints_found = len([r for r in results if r.status_code < 400])
        total_vulns = sum(len(r.vulnerabilities) for r in results)
        high_severity = len([r for r in results if r.severity in ["critical", "high"]])
        
        # Generate vulnerabilities HTML
        vulnerabilities_html = ""
        all_vulns = []
        for result in results:
            for vuln in result.vulnerabilities:
                all_vulns.append((result, vuln))
        
        # Sort by severity
        severity_order = {"critical": 0, "high": 1, "medium": 2, "low": 3}
        all_vulns.sort(key=lambda x: severity_order.get(x[1].get("severity", "low"), 3))
        
        for result, vuln in all_vulns:
            severity = vuln.get('severity', 'low')
            vulnerabilities_html += f'''
            <div class="vulnerability vuln-{severity}">
                <div class="vuln-header">
                    <div class="vuln-title">{html.escape(vuln.get('name', 'Unknown'))}</div>
                    <span class="severity-badge severity-{severity}">{severity.upper()}</span>
                </div>
                <p><strong>Endpoint:</strong> {html.escape(result.endpoint)}</p>
                <p><strong>Method:</strong> {html.escape(result.method)}</p>
                <p><strong>Description:</strong> {html.escape(vuln.get('description', 'No description'))}</p>
                <p><strong>Recommendation:</strong> {html.escape(vuln.get('recommendation', 'No recommendation'))}</p>
                {f'<p><strong>Evidence:</strong> <code>{html.escape(str(vuln.get("evidence", "")))}</code></p>' if vuln.get('evidence') else ''}
            </div>
            '''
        
        if not vulnerabilities_html:
            vulnerabilities_html = '<p style="text-align: center; color: #28a745; font-size: 1.2em;">ðŸŽ‰ No vulnerabilities found!</p>'
        
        # Generate endpoints HTML
        endpoints_html = ""
        found_endpoints = [r for r in results if r.status_code < 400]
        for result in found_endpoints:
            method_class = f"method-{result.method.lower()}"
            endpoints_html += f'''
            <div class="endpoint">
                <span class="method {method_class}">{result.method}</span>
                {html.escape(result.endpoint)}
                <span style="float: right; color: #666;">Status: {result.status_code}</span>
            </div>
            '''
        
        if not endpoints_html:
            endpoints_html = '<p style="text-align: center; color: #666;">No endpoints discovered</p>'
        
        # Fill template
        html_content = self.report_templates['html_template'].format(
            target_url=html.escape(config.target_url),
            timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            total_endpoints=total_endpoints,
            endpoints_found=endpoints_found,
            total_vulnerabilities=total_vulns,
            high_severity=high_severity,
            vulnerabilities_html=vulnerabilities_html,
            endpoints_html=endpoints_html
        )
        
        # Write HTML report
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
    
    async def _generate_csv_report(self, results: List, output_file: str, config):
        """Generate CSV report."""
        with open(output_file, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            
            # Write header
            writer.writerow([
                'Endpoint', 'Method', 'Status Code', 'Response Time', 
                'Content Length', 'Severity', 'Vulnerability Name', 
                'Vulnerability Type', 'Description', 'Recommendation'
            ])
            
            # Write data
            for result in results:
                if result.vulnerabilities:
                    for vuln in result.vulnerabilities:
                        writer.writerow([
                            result.endpoint,
                            result.method,
                            result.status_code,
                            f"{result.response_time:.3f}",
                            result.content_length,
                            result.severity,
                            vuln.get('name', ''),
                            vuln.get('type', ''),
                            vuln.get('description', ''),
                            vuln.get('recommendation', '')
                        ])
                else:
                    writer.writerow([
                        result.endpoint,
                        result.method,
                        result.status_code,
                        f"{result.response_time:.3f}",
                        result.content_length,
                        result.severity,
                        '', '', '', ''
                    ])
    
    async def _generate_txt_report(self, results: List, output_file: str, config):
        """Generate text report."""
        with open(output_file, 'w', encoding='utf-8') as f:
            # Header
            f.write("=" * 60 + "\n")
            f.write("APIVulnMiner Scan Report\n")
            f.write("=" * 60 + "\n\n")
            
            f.write(f"Target URL: {config.target_url}\n")
            f.write(f"Scan Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Scanner Version: 1.0.0\n\n")
            
            # Summary
            total_endpoints = len(results)
            endpoints_found = len([r for r in results if r.status_code < 400])
            total_vulns = sum(len(r.vulnerabilities) for r in results)
            high_severity = len([r for r in results if r.severity in ["critical", "high"]])
            medium_severity = len([r for r in results if r.severity == "medium"])
            low_severity = len([r for r in results if r.severity == "low"])
            
            f.write("SCAN SUMMARY\n")
            f.write("-" * 20 + "\n")
            f.write(f"Total Endpoints Tested: {total_endpoints}\n")
            f.write(f"Endpoints Found: {endpoints_found}\n")
            f.write(f"Total Vulnerabilities: {total_vulns}\n")
            f.write(f"High/Critical Severity: {high_severity}\n")
            f.write(f"Medium Severity: {medium_severity}\n")
            f.write(f"Low Severity: {low_severity}\n\n")
            
            # Vulnerabilities
            f.write("VULNERABILITIES FOUND\n")
            f.write("-" * 30 + "\n\n")
            
            all_vulns = []
            for result in results:
                for vuln in result.vulnerabilities:
                    all_vulns.append((result, vuln))
            
            if all_vulns:
                severity_order = {"critical": 0, "high": 1, "medium": 2, "low": 3}
                all_vulns.sort(key=lambda x: severity_order.get(x[1].get("severity", "low"), 3))
                
                for i, (result, vuln) in enumerate(all_vulns, 1):
                    f.write(f"{i}. {vuln.get('name', 'Unknown Vulnerability')}\n")
                    f.write(f"   Severity: {vuln.get('severity', 'low').upper()}\n")
                    f.write(f"   Endpoint: {result.endpoint}\n")
                    f.write(f"   Method: {result.method}\n")
                    f.write(f"   Description: {vuln.get('description', 'No description')}\n")
                    f.write(f"   Recommendation: {vuln.get('recommendation', 'No recommendation')}\n")
                    if vuln.get('evidence'):
                        f.write(f"   Evidence: {vuln.get('evidence')}\n")
                    f.write("\n")
            else:
                f.write("No vulnerabilities found.\n\n")
            
            # Discovered Endpoints
            f.write("DISCOVERED ENDPOINTS\n")
            f.write("-" * 25 + "\n\n")
            
            found_endpoints = [r for r in results if r.status_code < 400]
            if found_endpoints:
                for result in found_endpoints:
                    f.write(f"{result.method} {result.endpoint} [{result.status_code}]\n")
            else:
                f.write("No endpoints discovered.\n")
            
            f.write("\n" + "=" * 60 + "\n")
            f.write("End of Report\n")
            f.write("=" * 60 + "\n") 